var splinterlands=function(){let _config={},_player=null,_settings={},_cards=[],_use_keychain=!1,_transactions={},_collection=[];function get_card(card_detail_id){return _cards.find(c=>c.id==card_detail_id)}function api(url,data){return new Promise((resolve,reject)=>{null!=data&&void 0!=data||(data={}),data.v=(new Date).getTime(),_player&&(data.token=_player.token,data.username=_player.name),jQuery.getJSON(_config.api_url+url,data,r=>resolve(r))})}async function load_settings(){let response=await api("/settings");_settings.version&&(_settings.version,response.version),_settings=response}function group_collection(collection,id_only){collection||(collection=_collection);let grouped=[];return _cards.forEach(details=>{id_only?grouped.push(Object.assign({cards:collection.filter(o=>o.card_detail_id==details.id)},details)):details.editions.split(",").forEach(edition=>{grouped.push(Object.assign({gold:!1,edition:parseInt(edition),cards:collection.filter(o=>o.card_detail_id==details.id&&0==o.gold&&o.edition==parseInt(edition))},details)),grouped.push(Object.assign({gold:!0,edition:parseInt(edition),cards:collection.filter(o=>o.card_detail_id==details.id&&1==o.gold&&o.edition==parseInt(edition))},details))})}),grouped}return{init:async function(config){_config=config,await load_settings(),setInterval(load_settings,6e4),_cards=await api("/cards/get_details")},api:api,login:async function(username,key){if(!username&&(username=localStorage.getItem("splinterlands:username"),key=localStorage.getItem("splinterlands:key"),!username))return{success:!1,error:"Username not specified."};if((username=username.toLowerCase().trim()).startsWith("@")&&(username=username.substr(1)),(_use_keychain=!key)&&!window.steem_keychain)return{success:!1,error:"Missing private posting key."};if(!_use_keychain){if(key.startsWith("STM"))return{success:!1,error:"This appears to be a public key. You must use your private posting key to log in."};key&&!steem.auth.isWif(key)&&(key=steem.auth.getPrivateKeys(username,key,["posting"]).posting);try{steem.auth.wifToPublic(key)}catch(err){return{success:!1,error:`Invalid password or private posting key for account @${username}`}}}var response=await api("/players/login",{name:username,ref:localStorage.getItem("splinterlands:ref")});if(!response||response.error)return{success:!1,error:"An unknown error occurred trying to log in."};let token=null;if(_use_keychain){var keychain_response=await new Promise(resolve=>steem_keychain.requestVerifyKey(username,response.token,"Posting",r=>resolve(r)));if(!keychain_response||!keychain_response.success)return{success:!1,error:`The login attempt for account @${username} was unsuccessful.`};token=keychain_response.result.startsWith("#")?keychain_response.result.substr(1):keychain_response.result}else try{token=window.decodeMemo(key,response.token).substr(1)}catch(err){return{success:!1,error:"Invalid password or private posting key for account @"+username}}return(_player=response).token=token,localStorage.setItem("splinterlands:username",username),_use_keychain||localStorage.setItem("splinterlands:key",key),splinterlands.socket.connect(_config.ws_url,_player.name,_player.token),_player},send_tx:async function send_tx(id,display_name,data,retries){retries||(retries=0),id.startsWith("sm_")||(id=`sm_${id}`),_settings.test_mode&&!id.startsWith(_settings.prefix)&&(id=`${_settings.prefix}${id}`),data||(data={}),data.app=`steemmonsters/${_settings.version}`,data.sm_id=splinterlands.utils.randomStr(10),_settings.test_mode&&(data.app=`${_settings.prefix}${data.app}`);let data_str=JSON.stringify(data);if(data_str.length>2e3)return{success:!1,error:"Max custom_json data length exceeded."};var sm_id,check_tx_promise=(sm_id=data.sm_id,new Promise(resolve=>{_transactions[sm_id]={resolve:resolve},_transactions[sm_id].timeout=setTimeout(()=>{_transactions[sm_id]&&"complete"!=_transactions[sm_id].status&&resolve({success:!1,error:"Your transaction could not be found. This may be an issue with the Steem Monsters server. Please try refreshing the site to see if the transaction went through."}),delete _transactions[sm_id]},3e4)}));let broadcast_promise=null;broadcast_promise=_use_keychain?new Promise(resolve=>steem_keychain.requestCustomJson(_player.name,id,"Posting",data_str,display_name,response=>{resolve({type:"broadcast",success:response.success,trx_id:response.success?response.result.id:null,error:response.success?null:"string"==typeof response.error?response.error:response.error.message})})):new Promise(resolve=>steem.broadcast.customJson(localStorage.getItem("splinterlands:key"),[],[_player.name],id,data_str,(err,response)=>{resolve({type:"broadcast",success:response&&response.id,trx_id:response&&response.id?response.id:null,error:err?err.message:null})}));var result=await Promise.race([check_tx_promise,broadcast_promise]);return"broadcast"!=result.type?result:result.success?await check_tx_promise:(function(sm_id){var tx=_transactions[sm_id];tx&&(clearTimeout(tx.timeout),delete _transactions[sm_id])}(data.sm_id),"user_cancel"==result.error?result:result.error.indexOf("Please wait to transact")>=0?void 0:retries<2?(await splinterlands.utils.timeout(3e3),await send_tx(id,display_name,data,retries+1)):result)},load_collection:async function(player){return!player&&_player&&(player=_player.name),_collection=(await api(`/cards/collection/${player}`)).cards},group_collection:group_collection,get_battle_summoners:function(inactive_splinters,allowed_cards,ruleset,match_type,rating_level){return group_collection(_collection,!0).filter(d=>"Summoner"==d.type&&d.cards.length>0).map(d=>{if(inactive_splinters.includes(d.color))return null;if(["no_legendaries","no_legendary_summoners"].includes(allowed_cards)&&4==d.rarity)return null;if("Little League"==ruleset&&d.stats.mana>4)return null;let card=d.cards.find(o=>("gold_only"!=allowed_cards||o.gold)&&("alpha_only"!=allowed_cards||0==o.edition)&&("Ranked"!=match_type||splinterlands.utils.is_playable(o))&&(!o.delegated_to||o.delegated_to==_player.name));return card&&((card=Object.assign({},card)).level=splinterlands.utils.get_summoner_level(rating_level,card)),card}).filter(c=>c)},get_battle_monsters:function(inactive_splinters,allowed_cards,ruleset,match_type,rating_level,summoner_card,ally_color){var summoner_details=get_card(summoner_card.card_detail_id);return group_collection(_collection,!0).filter(d=>"Monster"==d.type&&d.cards.length>0&&(d.color==summoner_details.color||"Gray"==d.color||"Gold"==summoner_details.color&&d.color==ally_color)).map(d=>{if(("Lost Legendaries"==ruleset||"no_legendaries"==allowed_cards)&&4==d.rarity)return;if("Rise of the Commons"==ruleset&&d.rarity>2)return;if("Taking Sides"==ruleset&&"Gray"==d.color)return;if("Little League"==ruleset&&d.stats.mana[0]>4)return;let card=d.cards.find(o=>("gold_only"!=allowed_cards||o.gold)&&("alpha_only"!=allowed_cards||0==o.edition)&&("Ranked"!=match_type||splinterlands.utils.is_playable(o))&&(!o.delegated_to||o.delegated_to==_player.name));if(card){if(card.capped_level=splinterlands.utils.get_monster_level(rating_level,summoner_card,card),"Up Close & Personal"==ruleset&&0==d.stats.attack[card.capped_level-1])return;if("Keep Your Distance"==ruleset&&d.stats.attack[card.capped_level-1]>0)return;if("Broken Arrows"==ruleset&&d.stats.ranged[card.capped_level-1]>0)return}return card}).filter(c=>c)},get_card:get_card,get_settings:()=>_settings,get_cards:()=>_cards,get_player:()=>_player,get_transaction:sm_id=>_transactions[sm_id]}}();window.splinterlands||(window.splinterlands={}),window.splinterlands.utils=function(){function get_cur_block_num(){return Math.max(Math.floor((Date.now()-splinterlands.get_settings().timestamp)/3e3),0)+splinterlands.get_settings().last_block}function get_league(rating){return rating<100?0:rating>=4700?15:rating>=4200?14:rating>=3700?13:Math.min(parseInt((rating-100)/300)+1,15)}function get_summoner_level(rating_level,card){var max_level=10-2*(splinterlands.get_card(card.card_detail_id).rarity-1);return Math.min(card.level,Math.max(Math.round(max_level/4*rating_level),1))}return{randomStr:function(length){for(var charset="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",retVal="",i=0,n=charset.length;i<length;++i)retVal+=charset.charAt(Math.floor(Math.random()*n));return retVal},timeout:function(ms){return new Promise(resolve=>setTimeout(resolve,ms))},get_cur_block_num:get_cur_block_num,is_playable:function(card){if(card.market_id)return!1;if(!card.last_transferred_block||!card.last_used_block)return!0;var cooldown_expiration=get_cur_block_num()-splinterlands.get_settings().transfer_cooldown_blocks;return card.last_transferred_block<=cooldown_expiration||card.last_used_block<=cooldown_expiration},get_league:get_league,get_league_level:function(rating){return Math.max(Math.min(Math.floor((get_league(rating)-1)/3)+1,4),0)},get_league_name:function(rating){var num=get_league(rating),tier=(num-1)%3;return(num<4?"Bronze":num<7?"Silver":num<10?"Gold":num<13?"Diamond":"Champion")+" "+(0==tier?"III":1==tier?"II":"I")},get_summoner_level:get_summoner_level,get_monster_level:function(rating_level,summoner_card,monster_card){if(0==rating_level)return 1;var summoner_rarity=splinterlands.get_card(summoner_card.card_detail_id).rarity,monster_rarity=splinterlands.get_card(monster_card.card_detail_id).rarity,summoner_level=get_summoner_level(rating_level,summoner_card),monster_max=10-2*(monster_rarity-1),summoner_max=10-2*(summoner_rarity-1);return Math.min(monster.level,Math.max(Math.round(monster_max/summoner_max*summoner_level),1))}}}(),window.splinterlands||(window.splinterlands={}),window.splinterlands.socket=function(){let _url=null,_ws=null,_ping_interval=null,_session_id=null;function on_message(m){console.log(m);var message=JSON.parse(m.data);message.id&&_message_handlers[message.id]&&_message_handlers[message.id](message.data),message.ack&&send({type:"ack",msg_id:message.msg_id})}function on_error(e){console.log("Socket error..."),console.log(e)}function on_close(e){console.log("Socket closed..."),console.log(e),splinterlands.get_player()&&setTimeout(()=>_Connect(_url,splinterlands.get_player().name,splinterlands.get_player().token),1e3)}function send(message){_ws.send(JSON.stringify(message))}function ping(){send({type:"ping"})}let _message_handlers={transaction_complete:function(data){var trx=splinterlands.get_transaction(data.sm_id);trx&&(clearTimeout(trx.timeout),trx.resolve(data))}};return{connect:function(url,player,token,new_account){_session_id||(_session_id=splinterlands.utils.randomStr(10)),_url=url,_ws=new WebSocket(_url),console.log("Opening socket connection..."),_ws.onopen=function(){send(new_account?{type:"new_account",player:player,session_id:_session_id}:{type:"auth",player:player,access_token:token,session_id:_session_id})},_ws.onmessage=on_message,_ws.onerror=on_error,_ws.onclose=on_close,_ping_interval&&clearInterval(_ping_interval),_ping_interval=setInterval(ping,6e4)},close:function(){_ws.close()}}}();